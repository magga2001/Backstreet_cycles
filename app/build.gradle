plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
}

project.afterEvaluate { project ->
    setupAndroidReporting()
}

def setupAndroidReporting() {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            System.out.println("Task -> $testTaskName")

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def fileFilter = [
                        // data binding
                        'android/databinding/**/*.class',
                        '**/android/databinding/*Binding.class',
                        '**/android/databinding/*',
                        '**/androidx/databinding/*',
                        '**/BR.*',
                        // android
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.*',
                        // kotlin
                        '**/*MapperImpl*.*',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/*Component*.*',
                        '**/*BR*.*',
                        '**/Manifest*.*',
                        '**/*$Lambda$*.*',
                        '**/*Companion*.*',
                        '**/*Module*.*',
                        '**/*Dagger*.*',
                        '**/*Hilt*.*',
                        '**/*MembersInjector*.*',
                        '**/*_MembersInjector.class',
                        '**/*_Factory*.*',
                        '**/*_Provide*Factory*.*',
                        '**/*Extensions*.*',
                        // sealed and data classes
                        '**/*$Result.*',
                        '**/*$Result$*.*',
                        // adapters generated by moshi
                        '**/*JsonAdapter.*',
                ]

                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
                def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
                classDirectories.from = files([javaTree], [kotlinTree])
                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
                def coverageSourceDirs = ["src/main/java",
                                          "src/$productFlavorName/java",
                                          "src/$buildTypeName/java"]

                sourceDirectories.setFrom(files(coverageSourceDirs))
                additionalSourceDirs.setFrom(files(coverageSourceDirs))

                reports {
                    csv.enabled false // change if needed
                    xml.enabled false // change if needed
                    html {
                        enabled true
                        destination file("${buildDir}/coverage-report")
                    }
                }
            }
        }
    }
}

android {
    compileSdk 31

    testCoverage.jacocoVersion = "0.8.7"

    defaultConfig {
        applicationId "com.example.backstreet_cycles"
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.example.backstreet_cycles.BackstreetTestRunner"
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {
        release {

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            crunchPngs false

        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    testOptions {

        unitTests {
            includeAndroidResources = true
        }

        unitTests.returnDefaultValues = true
    }

    kapt {
        correctErrorTypes = true
    }

    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/testShared"
        }
        androidTest {
            java.srcDirs += "$projectDir/src/testShared"
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
    implementation 'com.google.android.material:material:1.5.0'

    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'com.google.ar:core:1.29.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'

    //Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    //Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'
    implementation 'androidx.test:monitor:1.5.0'
    implementation 'androidx.test:core-ktx:1.4.0'
    implementation 'androidx.test:rules:1.4.0'

    //Mapbox
    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.6.1'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:0.8.0'
    implementation("com.google.android.gms:play-services-location:19.0.1")
    implementation('com.mapbox.maps:android:10.2.0') {
        exclude group: 'group_name', module: 'module_name'
    }
    implementation 'com.mapbox.navigation:android:2.2.2'
    implementation 'com.mapbox.navigation:ui:1.5.1'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.6.1'
    implementation('com.mapbox.mapboxsdk:mapbox-android-navigation-ui:0.42.6') {
        transitive(true)
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-plugin-annotation-v8'
    }
    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-places-v9:0.12.0'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-services:2.2.9'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-telemetry:8.1.1@aar'

    //Firebase
    implementation platform('com.google.firebase:firebase-bom:29.0.4')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx:21.0.1'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx:24.0.1'

    //Coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"

    //CardView
    implementation('androidx.viewpager2:viewpager2:1.0.0')
    implementation("androidx.coordinatorlayout:coordinatorlayout:1.2.0")
    implementation('androidx.recyclerview:recyclerview:1.2.1')
    implementation('androidx.cardview:cardview:1.0.0')

    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0-alpha05")

    //Livedata
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.4.1")

    //Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    //Moshi
    implementation "com.squareup.moshi:moshi-kotlin:1.13.0"

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.7.2'
    implementation 'com.squareup.retrofit2:converter-moshi:2.7.2'

    //Lifecycle
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    //BottomSheetBehaviour
    implementation("androidx.coordinatorlayout:coordinatorlayout:1.2.0")
    implementation 'com.google.android.material:material:1.5.0'

    //UI testing
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:core:1.4.0"
    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.3"

    //Notification
    implementation("androidx.core:core-ktx:1.7.0")
    implementation 'com.google.android.gms:play-services-base:18.0.1'

    //WorkManager
    // Kotlin + coroutines
    implementation("androidx.work:work-runtime-ktx:2.7.1")

    //GIF Dependency
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.22'

    //Dagger - Hilt
    implementation("com.google.dagger:hilt-android:2.38.1")
    kapt("com.google.dagger:hilt-android-compiler:2.38.1")
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    implementation("androidx.hilt:hilt-work:1.0.0")
    kapt "androidx.hilt:hilt-compiler:1.0.0"
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.38.1'
    kaptTest 'com.google.dagger:hilt-android-compiler:2.38.1'
    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.38.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    //Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:core:1.4.0"
    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.3"
    androidTestImplementation "androidx.arch.core:core-testing:2.0.0"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.7.0"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0"

    //Truth
    testImplementation "com.google.truth:truth:1.1.3"
    
    // Mockito
    testImplementation "org.mockito:mockito-core:2.25.1"
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
    testImplementation('org.mockito:mockito-inline:3.4.0')
    implementation 'androidx.arch.core:core-testing:2.1.0'

    //Mockk
    androidTestImplementation "io.mockk:mockk-android:1.12.3"
    testImplementation "io.mockk:mockk:1.12.3"

    //Robolectric
    testImplementation "org.robolectric:robolectric:4.7.3"

    //UI testing
    //Espresso
    implementation 'androidx.test.espresso:espresso-idling-resource:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:3.0.2') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'com.android.support:support-v4:28.0.0'
        exclude group: 'com.android.support', module: 'support-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude module: 'com.android.support:support-annotations:28.0.0'
        exclude module: 'recyclerview-v7'
    }
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'

    //Instrumentation
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test:rules:1.0.2"

    //Turbines
    testImplementation 'app.cash.turbine:turbine:0.7.0'

    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.1'
}
